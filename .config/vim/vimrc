" vim: foldmethod=marker foldlevel=0

" options {{{
set number
set nowrap
set showmatch

set hlsearch
set ignorecase
set smartcase
set incsearch

set noexpandtab
set smarttab
set shiftwidth=4
set tabstop=4
set softtabstop=4

set autowrite
set autochdir

set modeline

set undolevels=1000
set backspace=indent,eol,start

set lazyredraw

set nobackup
set noswapfile
set writebackup

syntax enable

if has('unnamedplus')
	set clipboard=unnamedplus
else
	set clipboard=unnamed
endif

if has("mouse")
	set mouse=a
endif

set shell=/bin/bash
" }}}

" XDG directory spec {{{
if empty($XDG_CONFIG_HOME)
	let $XDG_CONFIG_HOME="$HOME/.config"
endif
if empty($XDG_CACHE_HOME)
	let $XDG_CACHE_HOME="$HOME/.cache"
endif
set directory=$XDG_CACHE_HOME/vim/swap,/var/tmp,/tmp
set backupdir=$XDG_CACHE_HOME/vim/backup,/tmp
set undodir=$XDG_CACHE_HOME/vim/undo
set viminfo+=n$XDG_CACHE_HOME/vim/info
set runtimepath^=$XDG_CONFIG_HOME/vim,$XDG_DATA_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim/after,$XDG_CONFIG_HOME/vim/after
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
" }}}

" bindings {{{

" tmux xterm-keys handling
if &term =~ '^screen'
	execute "set <xUp>=\e[1;*A"
	execute "set <xDown>=\e[1;*B"
	execute "set <xRight>=\e[1;*C"
	execute "set <xLeft>=\e[1;*D"
endif

nmap <c-t> :tabnew<cr>
nmap <c-k> :tabclose<cr>
nmap <c-f> :ed .<cr>
nnoremap <c-left> :tabprev<cr>
nnoremap <c-right> :tabnext<cr>

" }}}

" language-specific options {{{
autocmd Filetype python setl expandtab
autocmd Filetype yaml setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd BufRead,BufNewFile *.md set filetype=markdown
" }}}

" plugins {{{

" automatically install plug.vim
if empty(glob("$XDG_DATA_HOME/vim/autoload/plug.vim"))
	silent !curl -fLo $XDG_DATA_HOME/vim/autoload/plug.vim --create-dirs
	\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall
endif

" post-{install,update} hooks {{{
function! BuildYouCompleteMe(info)
	if a:info.status == 'installed' || a:info.force
		!./install.sh --clang-completer
	endif
endfunction
" }}}

call plug#begin("$XDG_DATA_HOME/vim/bundle")
let g:plug_timeout=120
let g:plug_window='tabnew'

" navigation
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-unimpaired'

" utilities
Plug 'itchyny/lightline.vim'
	set laststatus=2
Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYouCompleteMe') }
Plug 'rking/ag.vim', { 'on': 'Ag' }
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
	nmap <F6> :TagbarToggle<cr>
Plug 'tpope/vim-surround'

" lanugage support, auto-formatting, linting, etc.
Plug 'dag/vim-fish'
	autocmd FileType fish compiler fish
	autocmd FileType fish setlocal textwidth=79
	autocmd FileType fish setlocal foldmethod=expr
Plug 'fatih/vim-go'
	let g:go_disable_autoinstall = 1
Plug 'chase/vim-ansible-yaml'
Plug 'pangloss/vim-javascript'
Plug 'kchmck/vim-coffee-script'
Plug 'leshill/vim-json'
Plug 'othree/html5.vim'
Plug 'indenthtml.vim'
Plug 'mutewinter/nginx.vim'
Plug 'rhysd/vim-clang-format'
	let g:clang_format#code_style = 'file'
	let g:clang_format#detect_style_file = 1
	let g:clang_format#auto_format = 1
	let g:clang_format#auto_format_on_insert_leave = 1
	let g:clang_format#auto_formatexpr = 1
Plug 'nvie/vim-flake8'

call plug#end()
filetype plugin indent on

" }}}
