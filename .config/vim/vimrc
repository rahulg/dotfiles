" vim: foldmethod=marker foldmarker={,} foldlevel=0

" options {

if !has('nvim')
	set nocompatible
endif

set number
set nowrap
set showmatch

set ignorecase
set smartcase

set noexpandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4

set autowrite
set autochdir

set modeline

set lazyredraw

set nobackup
set noswapfile
set writebackup

set shortmess+=I

set noshowmode

syntax enable

if has('unnamedplus')
	set clipboard=unnamedplus
else
	set clipboard=unnamed
endif

if has('nvim')

	if empty('$TMUX')
		let $NVIM_TUI_ENABLE_TRUE_COLOR=1
	endif
	let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

else

	" nvim doesn't require these
	set backspace=indent,eol,start
	set incsearch
	set smarttab
	set wildmenu
	set wildmode=longest,full

	if has('mouse')
		set mouse=a
	endif

	if has('mouse_sgr')
		set ttymouse=sgr
	else
		set ttymouse=xterm2
	endif

endif

" vim < 7.4.276 don't have support for fish
if v:version < 704
	\ || (v:version == 704 && !has('patch276'))
	set shell=/bin/bash
endif

" }

" XDG directory spec {

if empty($XDG_CONFIG_HOME)
	let $XDG_CONFIG_HOME='$HOME/.config'
endif
if empty($XDG_CACHE_HOME)
	let $XDG_CACHE_HOME='$HOME/.cache'
endif
set directory=$XDG_CACHE_HOME/vim/swap,/var/tmp,/tmp
set backupdir=$XDG_CACHE_HOME/vim/backup,/tmp
set undodir=$XDG_CACHE_HOME/vim/undo
set viminfo+=n$XDG_CACHE_HOME/vim/info
set runtimepath^=$XDG_CONFIG_HOME/vim,$XDG_DATA_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim/after,$XDG_CONFIG_HOME/vim/after
let $MYVIMRC='$XDG_CONFIG_HOME/vim/vimrc'

" }

" bindings {

nnoremap <c-t> :tabnew<cr>
nnoremap <c-left> :tabprev<cr>
nnoremap <c-right> :tabnext<cr>
nnoremap <F1> <nop>
inoremap <F1> <nop>
nnoremap Q <nop>

" }

" plugins {

" automatically install plug.vim
if empty(glob('$XDG_DATA_HOME/vim/autoload/plug.vim'))
	silent !curl -fLo $XDG_DATA_HOME/vim/autoload/plug.vim --create-dirs
	\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall
endif

call plug#begin('$XDG_DATA_HOME/vim/bundle')
let g:plug_timeout=120
let g:plug_window='tabnew'

" navigation
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-unimpaired'

" utilities
Plug 'itchyny/lightline.vim'
	set laststatus=2
Plug 'Valloric/YouCompleteMe', { 'do': function('setup#BuildYouCompleteMe') }
Plug 'rking/ag.vim', { 'on': 'Ag' }
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
	nmap <F6> :TagbarToggle<cr>
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-commentary'

" language support, auto-formatting, linting, etc.
Plug 'kballard/vim-fish'
	autocmd FileType fish compiler fish
	autocmd FileType fish setlocal textwidth=79
	autocmd FileType fish setlocal foldmethod=expr
Plug 'fatih/vim-go', { 'do': function('setup#BuildVimGo') }
Plug 'chase/vim-ansible-yaml'
Plug 'pangloss/vim-javascript'
Plug 'kchmck/vim-coffee-script'
Plug 'leshill/vim-json'
Plug 'othree/html5.vim'
Plug 'indenthtml.vim'
Plug 'mutewinter/nginx.vim'
Plug 'rhysd/vim-clang-format'
	let g:clang_format#code_style = 'file'
	let g:clang_format#detect_style_file = 1
	let g:clang_format#auto_format = 1
	let g:clang_format#auto_format_on_insert_leave = 1
	let g:clang_format#auto_formatexpr = 1
Plug 'nvie/vim-flake8'
Plug 'rust-lang/rust.vim'

call plug#end()
filetype plugin indent on

" }
